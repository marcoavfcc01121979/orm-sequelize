O cliente não gostaria que registros importantes do sistema, como as Pessoas, sejam apagados definitivamente do banco de dados.

Vou coloca essa opçoes para todos os Models ou seja vou trabalhar com essa posibilidades para todas os Modelos.

tenho que adiciona o objeto { paranoid: true }

 

'use strict';

const {

Model

} = require('sequelize');

module.exports = (sequelize, DataTypes) => {

class Matriculas extends Model {

/**

* Helper method for defining associations.

* This method is not a part of Sequelize lifecycle.

* The `models/index` file will call this method automatically.

*/

static associate(models) {

// define association here

Matriculas.belongsTo(models.Pessoas, {

foreignKey: 'estudante_id'

})

Matriculas.belongsTo(models.Turmas, {

foreignKey: 'turma_id'

})

}

};

Matriculas.init({

status: DataTypes.STRING

}, {

sequelize,
**paranoid: true**
modelName: 'Matriculas',

});

return Matriculas;

};

eu adicionei o paranoid: true dentro do modelo **Turmas, Matriculas, Pessoas e Niveis**

para eu fazer o delete suave ou seja esconder a deleçao das pessoas na tabelas Pessoas eu peciso adiciona o campo colum dentro da tabelas pessoas

1) criar um arquivo de deleção dentro de migrate onde é onde eu adiciono a coluna.
2) passo adiciona o deletedAt ao lado de Pessoas e deixar apenas um unico campo
'use strict';
module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.addColumn('Pessoas', **'deletedAt'**,  {
      allowNull: true,
      type: Sequelize.DATE
    });
  },
  down: async (queryInterface, Sequelize) => {
    await queryInterface.removeColumn('Pessoas', 'deletedAt');
  }
};

3) passo fazer a mesma coisa para todas as outras tabelas.
4) rotar o comando de migração
npx sequelize-cli db:migrate 

5) soft delete so faz é vingir que foi feita uma deleção no banco de dados
podemos recuperar a delecao atraves dos controllers

6) Agora dentro do controller no arquivo PessoaController.js podemos 
adicionar o metodo que restaura o arquivo que foi deletado.

depois do metodo deletaPessoa adicionamos o arquivo que faz a restauração do 
metodo.

static async restaurarPessoa(req, res) {
    const { id } = req.params;
    try { 
      await database.Pessoas.restore({ where: { id: Number(id) } });
      return res.status(200).json({ messagem: `id: ${id} restaurado com sucesso.` })
    } catch(error) {
      return res.status(500).json(error.message);  
    }
  }

agora precisamos criar uma rota para esse metodo dentro de pessoasRouter.js
router.post('/pessoas/:id/restaurar', PessoaController.restaurarPessoa);

- Para deixar a interface mais limpa, o cliente gostaria que na lista de
Pessoas, por Padrão, fossem exibidos somente os usuarios ativos.

'use strict';
const {
  Model
} = require('sequelize');
module.exports = (sequelize, DataTypes) => {
  class Pessoas extends Model {
    /**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */
    static associate(models) {
      // define association here
      // o sequelize ate cria o nome do foreignKey mais ele utiliza o seu padrao.
      Pessoas.hasMany(models.Turmas, {
        foreignKey: 'docente_id'
      })
      Pessoas.hasMany(models.Matriculas, {
        foreignKey: 'estudante_id'
      })
    }
  };
  Pessoas.init({
    nome: DataTypes.STRING,
    ativo: DataTypes.BOOLEAN,
    email: DataTypes.STRING,
    role: DataTypes.STRING
  }, {
    sequelize,
    paranoid: true,
   /* defaultScope: {
      where: { ativo: true }
    }, */
    modelName: 'Pessoas',
  });
  return Pessoas;
};

podemos ter varios outros scopo para sobreescrever o scopo Padrão
ex:. 
'use strict';
const {
  Model
} = require('sequelize');
module.exports = (sequelize, DataTypes) => {
  class Pessoas extends Model {
    /**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */
    static associate(models) {
      // define association here
      // o sequelize ate cria o nome do foreignKey mais ele utiliza o seu padrao.
      Pessoas.hasMany(models.Turmas, {
        foreignKey: 'docente_id'
      })
      Pessoas.hasMany(models.Matriculas, {
        foreignKey: 'estudante_id'
      })
    }
  };
  Pessoas.init({
    nome: DataTypes.STRING,
    ativo: DataTypes.BOOLEAN,
    email: DataTypes.STRING,
    role: DataTypes.STRING
  }, {
    sequelize,
    paranoid: true,
    defaultScope: {
      where: { ativo: true }
    },
    /* scopes: {
      todos: { where: {} }
    }, */
    modelName: 'Pessoas',
  });
  return Pessoas;
};

agora vamos para controller pessoa para adiciona um novo metodo

static async pegaPessoasAtivas(req, res) {
    try{
      const pessoasAtivas = await database.Pessoas.findAll()
      return res.status(200).json(pessoasAtivas);
    }catch(error) {
      return res.status(500).json(error.message)
    }
  }

agora vamos adiciona as rotas dentro de routes para pegar esses metodos
router.get('/pessoas', PessoaController.pegaPessoasAtivas);

agora vamos criar o metodo que sobrescreve o scopeDefault

static async pegarTodasAsPessoas(req, res) {
    try{
      const todasAsPessoas = await database.Pessoas.scope('todos').findAll()
      return res.status(200).json(todasAsPessoas)
    }catch(error) {
      return res.status(500).json(error.message)
    }
  }

agora vamos criar a rota que sobrescreve o scopeDefault
router.get('/pessoas/todas', PessoaController.pegarTodasAsPessoas);

- Foram percebidos algumas falhas de validação dos formularios por parte
do front-end, o que resultou em dados de e-mail inválidos no banco. È desejavel 
que essa validação não seja responsabilidade exclusiva do front.

'use strict';
const {
  Model
} = require('sequelize');
module.exports = (sequelize, DataTypes) => {
  class Pessoas extends Model {
    /**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */
    static associate(models) {
      // define association here
      // o sequelize ate cria o nome do foreignKey mais ele utiliza o seu padrao.
      Pessoas.hasMany(models.Turmas, {
        foreignKey: 'docente_id'
      })
      Pessoas.hasMany(models.Matriculas, {
        foreignKey: 'estudante_id'
      })
    }
  };
  Pessoas.init({
    nome: DataTypes.STRING,
    ativo: DataTypes.BOOLEAN,
    /* email: {
      type: DataTypes.STRING,
      validate: {
        isEmail: {
          args: true,
          msg: 'dado do tipo e-email inválidos'
        }
      }
    }, */
    role: DataTypes.STRING
  }, {
    sequelize,
    paranoid: true,
    defaultScope: {
      where: { ativo: true }
    },
    scopes: {
      todos: { where: {} }
    },
    modelName: 'Pessoas',
  });
  return Pessoas;
};

criando uma funçao validadora mais especifica para nome na 
Tabela Pessoas.

'use strict';
const {
  Model
} = require('sequelize');
module.exports = (sequelize, DataTypes) => {
  class Pessoas extends Model {
    /**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */
    static associate(models) {
      // define association here
      // o sequelize ate cria o nome do foreignKey mais ele utiliza o seu padrao.
      Pessoas.hasMany(models.Turmas, {
        foreignKey: 'docente_id'
      })
      Pessoas.hasMany(models.Matriculas, {
        foreignKey: 'estudante_id'
      })
    }
  };
  Pessoas.init({
    /* nome: {
      type: DataTypes.STRING,
      validate: {
        funcaoValidadora: function(dado) {
          if(dado.length < 3) 
            throw new Error('O campo nome tem que ter mais de 3 caracteres.');
        }
      }
    }, */
    ativo: DataTypes.BOOLEAN,
    email: {
      type: DataTypes.STRING,
      validate: {
        isEmail: {
          args: true,
          msg: 'dado do tipo e-email inválidos'
        }
      }
    },
    role: DataTypes.STRING
  }, {
    sequelize,
    paranoid: true,
    defaultScope: {
      where: { ativo: true }
    },
    scopes: {
      todos: { where: {} }
    },
    modelName: 'Pessoas',
  });
  return Pessoas;
};

È importante poder consultar todas as matriculas confirmadas referentes
a estudante x de forma rápida.

agora dentro do arquivo PessoaController.js vou criar um metodo pegaMatricula

static async pegaMatricula(req, res) {
    const { estudanteId} = req.params;
    try {
      const matriculas = await database.Matriculas.findAll({ 
        where: { 
          estudante_id: Number(estudanteId)
      }})
      return res.status(200).json(matriculas);
    } catch(error) {
      return res.status(500).json(error.message);
    }
  }

vou criar agora um scope de associação passando duas informações.

'use strict';
const {
  Model
} = require('sequelize');
module.exports = (sequelize, DataTypes) => {
  class Pessoas extends Model {
    /**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */
    static associate(models) {
      // define association here
      // o sequelize ate cria o nome do foreignKey mais ele utiliza o seu padrao.
      Pessoas.hasMany(models.Turmas, {
        foreignKey: 'docente_id'
      })
      Pessoas.hasMany(models.Matriculas, {
        foreignKey: 'estudante_id',
        /* scope: { status: 'confirmado' },
        as: 'aulasMatriculadas' */
      })
    }
  };
  Pessoas.init({
    nome: {
      type: DataTypes.STRING,
      validate: {
        funcaoValidadora: function(dado) {
          if(dado.length < 3) 
            throw new Error('O campo nome tem que ter mais de 3 caracteres.');
        }
      }
    },
    ativo: DataTypes.BOOLEAN,
    email: {
      type: DataTypes.STRING,
      validate: {
        isEmail: {
          args: true,
          msg: 'dado do tipo e-email inválidos'
        }
      }
    },
    role: DataTypes.STRING
  }, {
    sequelize,
    paranoid: true,
    defaultScope: {
      where: { ativo: true }
    },
    scopes: {
      todos: { where: {} }
    },
    modelName: 'Pessoas',
  });
  return Pessoas;
};

nesse momento vou recriar o metodo pegaMatricula para que faça sentido a associação 
desse método ele cria um mixins dentro dentro dele 

static async pegaMatricula(req, res) {
    const { estudanteId} = req.params;
    try {
      const pessoa = await database.Pessoas.findOne({ where: { id: Number(estudanteId) } });
      const matriculas = await pessoa.getAulasMatriculadas() /** foi criado automaticamente **/
      return res.status(200).json(matriculas);
    } catch(error) {
      return res.status(500).json(error.message);
    }
  }


  agora vamos criar a rota para pegar a matricula
  router.get('/pessoas/:estudanteId/matricula', PessoaController.pegaMatricula);
  
  O Cliente gostaria de poder consultar as turmas abertas por intervalo 
  de data, para não receber informações desnecessárias (Como turmas antigas);

  temos que importar Op do Sequelize
  Agora vamos alterar pegaTodasAsTurmas para consultar por intervalos de 
  data.

  static async pegaTodasAsTurmas(req, res) {
    const { data_inicial, data_final } = req.query;
    const where = {}
    data_inicial || data_final ? where.data_inicio = {} : null;
    data_inicial ? where.data_inicio[Op.gte] = data_inicial : null;
    data_final ? where.data_inicio[Op.lte] = data_final : null;
    try{
      const todasAsTurmas = await database.Turmas.findAll({ where });
      return res.status(200).json(todasAsTurmas);
    } catch(error) {
      return res.status(500).json(error.message);
    }
  }

O CLiente quer poder consultar as matriculas por turma e saber quais delas 
estão lotadas, para organizar melhor as matriculas.

Preciso criar um metodo dentro PessoasController para eu saber quantos estudantes 
estao estudante estao matriculados por turmas.

static async pegaMatriculasPorTurma(req, res) {
    const { turmaId } = req.params;
    try {
      const todasAsMatriculas = await database.Matriculas.findAndCountAll({
        where: {
          turma_id: Number(turmaId),
          status: 'confirmado'
        },
        limit: 1,
        order: [['estudante_id', 'ASC']]
      })
      return res.status(200).json(todasAsMatriculas);
    } catch(error) {
      return res.status(500).json(error.message);
    }
  }

Agora demos criar uma rota para esse metodo pegaMatriculasPorTurma.
router.get('/pessoas/matricula/:turmaId/confirmado', PessoaController.pegaMatriculasPorTurma);

vamos criar dentro PessoasController um novo método pegaTurmasLotadas
onde traz as turmas lotadas com a quantidade >= 2 no filtro.

static async pegaTurmaLotadas(req, res) {
    const lotacaoTurma = 2;
    try {
      const turmasLotadas = await database.Matriculas
        .findAndCountAll({
          where: {
            status: 'confirmado'
          },
          attributes: ['turma_id'],
          group: ['turma_id'],
          having: Sequelize.literal(`count(turma_id) >= ${lotacaoTurma}`)
        })
        return res.status(200).json(turmasLotadas.count);
    } catch(error) {
      return res.status(500).json(error.message);
    }
  }

  vamos criar no routerPessoas a rota para pegar as turmas que estao lotadas com 2 pessoas.
  router.get('/pessoas/matriculas/lotada', PessoaController.pegaTurmaLotadas);

  O cliente gostaria que, uma vez que o cadastro de um estudante fossem
  desativado, todas as matrículas relativas a este estudante automaticamente
  passarem a constar "canceladas".

  vamos criar o metodo no arquivo PessoasController.js
  static async cancelaPessoas(req, res) {
    const { estudanteId } = req.params;
    try {
      await database.Pessoas
        .update({ ativo: false }, { where: { id: Number(estudanteId) } })
      await database.Matriculas
        .update({ status: 'cancelado' }, { where: { estudante_id: Number(estudanteId) } })
      return res.status(200).json({ message: `matriculas ref. estudante ${estudanteId} canceladas` })
    } catch(error) {
      return res.status(500).json(error.message);
    }
  }

agora vamos criar uma rota do tipo post
router.post('/pessoas/:estudanteId/cancela', PessoaController.cancelaPessoas);

usando transacoes

static async cancelaPessoas(req, res) {
    const { estudanteId } = req.params;
    try {
      database.sequelize.transaction(async transacao => {
        await database.Pessoas
          .update({ ativo: false }, { where: { id: Number(estudanteId) } }, {
            transaction: transacao })
        await database.Matriculas
          .update({ status: 'cancelado' }, { where: { estudante_id: Number(estudanteId) } }, 
          { transaction: transacao })
        return res.status(200).json({ message: `matriculas ref. estudante ${estudanteId} canceladas` })
      })
    } catch(error) {
      return res.status(500).json(error.message);
    }
  }

